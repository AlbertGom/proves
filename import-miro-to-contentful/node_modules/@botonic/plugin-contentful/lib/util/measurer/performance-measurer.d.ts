export declare abstract class PerformanceMeasurer {
    protected perf: Performance;
    protected enabled: boolean;
    protected allProfiled: {
        [key: string]: PerformanceEntry[];
    };
    private static STATS_PAD;
    protected constructor(perf: Performance);
    enable(): void;
    isEnabled(): boolean;
    disable(): void;
    clear(): void;
    start(mark: string): void;
    end(mark: string, name: string): void;
    abstract getEntriesByName(name: string): PerformanceEntry[];
    /**
     * get the amount of calls to a specific profiled entity
     * @param name
     */
    callCount(name: string): number;
    totalRunTime(name: string): number;
    maxRunTime(name: string): number;
    private reduce;
    averageRunTime(name: string): number;
    /**
     * prints all available data about the profiled entity
     * @param name
     * @param namePadding
     * @param callCountPadding
     * @param totalRuntimePadding
     * @param avgRunTimePadding
     */
    stringSummary(name: string, namePadding?: number, callCountPadding?: number, totalRuntimePadding?: number, avgRunTimePadding?: number, maxRunTimePadding?: number): string;
    private profiledKeys;
    /**
     * prints all available data about all the profiled entities
     */
    stringSummaryAll(): string;
    private totalCalls;
    private totalCallTime;
    private totalMaxCallTime;
}
