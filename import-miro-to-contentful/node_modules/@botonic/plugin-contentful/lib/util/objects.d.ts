export declare function shallowClone<T extends object>(obj: T): T;
/**
 * Deep copy function for TypeScript.
 * @param T Generic type of target/copied value.
 * @param target Target value to be copied.
 * @see Source project, ts-deepcopy https://github.com/ykdr2017/ts-deepcopy
 * @see Code pen https://codepen.io/erikvullings/pen/ejyBYg
 */
export declare const deepClone: <T>(target: T, alreadyCloned?: object[]) => T;
export interface Equatable {
    equals(other: Equatable): boolean;
}
export interface Stringable {
    toString(): string;
}
export interface ValueObject extends Equatable, Stringable {
}
/**
 * It returns a ROUGH estimation, since V8 will greatly optimize anyway
 * @return the number of bytes
 * Not using https://www.npmjs.com/package/object-sizeof to minimize dependencies
 */
export declare function roughSizeOfObject(object: any): number;
