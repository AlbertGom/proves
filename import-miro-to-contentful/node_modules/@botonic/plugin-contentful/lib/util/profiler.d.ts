import { PerformanceMeasurer } from './measurer/performance-measurer';
export declare const isBrowser: () => any;
export declare class Profiler {
    static performanceMeasurer: PerformanceMeasurer;
    /**
     * disables any profiling logic
     */
    static isEnabled(): boolean;
    /**
     * disables any profiling logic
     */
    static disable(): void;
    /**
     * enables profiling logic
     */
    static enable(): void;
    /**
     * get a pretty summary of your profiling
     */
    static getSummaryAll(): string;
    /**
     * get a pretty summary 1 profiling
     */
    static getSummary(name: string): string;
    static getCallCount(name: string): number;
    /**
     * clear all measurements
     */
    static clear(): void;
    /**
     * annotation for a typescript class member
     * @constructor
     */
    static Profile(customName?: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => PropertyDescriptor;
    /**
     * creates a profiled function
     */
    static profiledFunction(f: Function, customName?: string): (...args: any[]) => any;
}
export declare class Measure {
    static lastUuid: number;
    private readonly uuid;
    readonly name: string;
    constructor(name: string);
    end<T = undefined>(passthrough?: T): T;
}
