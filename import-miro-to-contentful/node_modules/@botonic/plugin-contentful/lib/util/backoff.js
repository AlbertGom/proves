"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.repeatWithBackoff = exports.ExponentialBackoff = exports.sleep = void 0;
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}
exports.sleep = sleep;
class ExponentialBackoff {
    constructor(startMs = 10, times = 10) {
        this.startMs = startMs;
        this.times = times;
    }
    backoff() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.times <= 0) {
                throw new Error('Aborting exponential backoff');
            }
            yield sleep(this.startMs);
            this.startMs *= 2;
            this.times++;
        });
    }
}
exports.ExponentialBackoff = ExponentialBackoff;
function repeatWithBackoff(func, backoff = new ExponentialBackoff(), logger = console.log) {
    return __awaiter(this, void 0, void 0, function* () {
        for (;;) {
            try {
                return yield func();
            }
            catch (e) {
                const stack = e.stack
                    ? `\nat:\n${String(e.stack)}`
                    : ' (no stack available)';
                logger(`Retrying after exception at ${new Date().toISOString()}: ${String(e)}` + stack);
                yield backoff.backoff();
            }
        }
    });
}
exports.repeatWithBackoff = repeatWithBackoff;
//# sourceMappingURL=backoff.js.map