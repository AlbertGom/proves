"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reduceMultiError = exports.asyncEach = exports.resumable = exports.asyncMap = void 0;
const Parallel = __importStar(require("async-parallel"));
const async_parallel_1 = require("async-parallel");
/**
 * async-parallel makes code simpler and allows limiting concurrency
 */
function asyncMap(context, list, action, concurrency, errorTreatment) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = yield Parallel.map(list, resumable(action, errorTreatment), concurrency || context.concurrency);
        return result.filter((i) => i !== undefined);
    });
}
exports.asyncMap = asyncMap;
function resumable(action, errorTreatment) {
    const wrapped = (value, index, list) => __awaiter(this, void 0, void 0, function* () {
        try {
            return yield action(value, index, list);
        }
        catch (e) {
            if (errorTreatment) {
                return errorTreatment(value, e);
            }
            throw e;
        }
    });
    return wrapped;
}
exports.resumable = resumable;
function asyncEach(context, list, action, concurrency) {
    return __awaiter(this, void 0, void 0, function* () {
        concurrency = concurrency || context.concurrency;
        yield Parallel.each(list, action, concurrency);
    });
}
exports.asyncEach = asyncEach;
function reduceMultiError(error) {
    let reduced = [];
    for (const e of error.list) {
        if (e instanceof async_parallel_1.MultiError) {
            reduced = reduced.concat(reduceMultiError(e));
        }
        else {
            reduced.push(e);
        }
    }
    return reduced;
}
exports.reduceMultiError = reduceMultiError;
//# sourceMappingURL=async.js.map