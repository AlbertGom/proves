/// <reference types="node" />
import { Stream } from 'stream';
import { AssetId, AssetInfo, ContentfulExceptionWrapper, ContentId, ContentType } from '../cms';
import * as nlp from '../nlp';
import { Locale } from '../nlp';
import { ContentFieldType } from './fields';
import { FieldsValues, ManageCms } from './manage-cms';
import { ManageContext } from './manage-context';
export declare class ErrorReportingManageCms implements ManageCms {
    readonly manageCms: ManageCms;
    readonly logErrors: boolean;
    exceptionWrapper: ContentfulExceptionWrapper;
    constructor(manageCms: ManageCms, logErrors?: boolean);
    updateFields(context: ManageContext, contentId: ContentId, fields: FieldsValues): Promise<FieldsValues>;
    deleteContent(context: ManageContext, contentId: ContentId): Promise<void>;
    createContent(context: ManageContext, model: ContentType, id: string): Promise<void>;
    copyField(context: ManageContext, contentId: ContentId, field: ContentFieldType, fromLocale: nlp.Locale, onlyIfTargetEmpty: boolean): Promise<void>;
    private handleError;
    copyAssetFile(context: ManageContext, assetId: AssetId, fromLocale: Locale): Promise<void>;
    removeAssetFile(context: ManageContext, assetId: AssetId): Promise<void>;
    createAsset(context: ManageContext, file: string | ArrayBuffer | Stream, info: AssetInfo): Promise<{
        id: string;
        url?: string;
    }>;
    removeAsset(context: ManageContext, assetId: AssetId): Promise<void>;
}
