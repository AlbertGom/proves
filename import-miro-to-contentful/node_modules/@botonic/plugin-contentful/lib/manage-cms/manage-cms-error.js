"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorReportingManageCms = void 0;
const cms_1 = require("../cms");
class ErrorReportingManageCms {
    constructor(manageCms, logErrors = true) {
        this.manageCms = manageCms;
        this.logErrors = logErrors;
        this.exceptionWrapper = new cms_1.ContentfulExceptionWrapper('ManageCms');
    }
    updateFields(context, contentId, fields) {
        return this.manageCms
            .updateFields(context, contentId, fields)
            .catch(this.handleError('updateFields', context, contentId, fields));
    }
    deleteContent(context, contentId) {
        return this.manageCms
            .deleteContent(context, contentId)
            .catch(this.handleError('deleteContent', undefined, contentId, {}));
    }
    createContent(context, model, id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.manageCms
                .createContent(context, model, id)
                .catch(this.handleError('createContent', undefined, new cms_1.ContentId(model, id), {}));
        });
    }
    copyField(context, contentId, field, fromLocale, onlyIfTargetEmpty) {
        return this.manageCms
            .copyField(context, contentId, field, fromLocale, onlyIfTargetEmpty)
            .catch(this.handleError('copyField', context, contentId, {
            field,
            fromLocale,
            onlyIfTargetEmpty,
        }));
    }
    handleError(method, context, resourceId, args) {
        return (reason) => {
            throw this.exceptionWrapper.wrap(reason, method, resourceId, args, context);
        };
    }
    copyAssetFile(context, assetId, fromLocale) {
        return this.manageCms
            .copyAssetFile(context, assetId, fromLocale)
            .catch(this.handleError('copyAssetFile', context, assetId, { fromLocale }));
    }
    removeAssetFile(context, assetId) {
        return this.manageCms
            .removeAssetFile(context, assetId)
            .catch(this.handleError('removeAssetFile', context, assetId, {}));
    }
    createAsset(context, file, info) {
        return this.manageCms
            .createAsset(context, file, info)
            .catch(this.handleError('createAsset', undefined, undefined, {}));
    }
    removeAsset(context, assetId) {
        return this.manageCms
            .removeAsset(context, assetId)
            .catch(this.handleError('removeAsset', undefined, assetId, {}));
    }
}
exports.ErrorReportingManageCms = ErrorReportingManageCms;
//# sourceMappingURL=manage-cms-error.js.map