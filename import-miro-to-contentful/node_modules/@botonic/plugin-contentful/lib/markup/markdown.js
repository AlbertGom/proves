"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Markdown = void 0;
const marked = __importStar(require("marked"));
const markup_1 = require("./markup");
/**
 * marked's intex.ts does not include these types (though they work): del, strong, em
 */
class Markdown extends markup_1.MarkUp {
    constructor(flavour) {
        super(flavour);
        switch (flavour) {
            case markup_1.MarkupType.MARKDOWN:
                this.options = {};
                break;
            case markup_1.MarkupType.GITHUB:
            case markup_1.MarkupType.CONTENTFUL:
                this.options = { gfm: true };
                break;
            default:
                throw Error(`Invalid markdown flavour: ${flavour}`);
        }
    }
    parse(txt) {
        // cannot cache Lexer because it would accumulate the tokens
        return marked.lexer(txt);
    }
    renderToken(token) {
        throw new Error('Not implemented');
    }
    wrapWithInline(input, inlineType) {
        // emphasis & strong cannot have internal spaces
        input = input.trim();
        if (inlineType === markup_1.TokenType.EMPHASIS) {
            return `_${input}_`;
        }
        if (inlineType === markup_1.TokenType.STRONG) {
            return `**${input}**`;
        }
        throw new Error(`wrapWithInline does not support inline ${inlineType}`);
    }
}
exports.Markdown = Markdown;
//# sourceMappingURL=markdown.js.map