"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_FALLBACK_CACHE_LIMIT_KB = exports.DEFAULT_CACHE_TTL_MS = exports.DEFAULT_TIMEOUT_MS = void 0;
const cms = __importStar(require("./cms"));
const cms_1 = require("./cms");
const cms_contentful_1 = require("./contentful/cms-contentful");
const nlp_1 = require("./nlp");
const render_1 = require("./render");
const search_1 = require("./search");
exports.DEFAULT_TIMEOUT_MS = 30000;
exports.DEFAULT_CACHE_TTL_MS = 10000;
exports.DEFAULT_FALLBACK_CACHE_LIMIT_KB = 100 * 1024;
class BotonicPluginContentful {
    constructor(opt) {
        const optionsAny = opt;
        if (optionsAny.cms) {
            this.cms = optionsAny.cms;
        }
        else {
            const contOptions = opt;
            const factory = contOptions.contentfulFactory ||
                (o => {
                    let cms = new cms_contentful_1.Contentful(o);
                    if (contOptions.logCalls) {
                        cms = new cms_1.LogCMS(cms, contOptions);
                    }
                    return cms;
                });
            this.cms = factory(contOptions);
        }
        this.cms = new cms.ErrorReportingCMS(this.cms, opt.logger);
        this.renderer = opt.renderer || new render_1.BotonicMsgConverter();
        if (opt.search) {
            this.search = opt.search;
            this.normalizer = opt.normalizer || new nlp_1.Normalizer();
        }
        else {
            this.normalizer = opt.nlpOptions
                ? new nlp_1.Normalizer(opt.nlpOptions.blackList)
                : new nlp_1.Normalizer();
            this.search = new search_1.Search(this.cms, this.normalizer, opt.keywordsOptions);
        }
    }
    pre(r) { }
    post(r) { }
}
exports.default = BotonicPluginContentful;
//# sourceMappingURL=plugin.js.map