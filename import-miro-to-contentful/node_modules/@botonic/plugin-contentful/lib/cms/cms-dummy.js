"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DummyCMS = void 0;
const search_result_1 = require("../search/search-result");
const time = __importStar(require("../time"));
const contents_1 = require("./contents");
const context_1 = require("./context");
/**
 * Useful for mocking CMS, as ts-mockito does not allow mocking interfaces
 */
class DummyCMS {
    /**
     *
     * @param buttonCallbacks models which contain buttons will return one per each specified callback
     */
    constructor(buttonCallbacks) {
        this.buttonCallbacks = buttonCallbacks;
    }
    button(id, context) {
        throw new Error('Method not implemented.');
    }
    element(id, context) {
        throw new Error('Method not implemented.');
    }
    carousel(id, {} = context_1.DEFAULT_CONTEXT) {
        return __awaiter(this, void 0, void 0, function* () {
            const elements = this.buttonCallbacks.map((callback, i) => this.createElement(String(i), callback));
            return Promise.resolve(new contents_1.Carousel(new contents_1.CommonFields(id, id), elements));
        });
    }
    document(id, {} = context_1.DEFAULT_CONTEXT) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(new contents_1.Document(new contents_1.CommonFields(id, id), DummyCMS.PDF));
        });
    }
    text(id, {} = context_1.DEFAULT_CONTEXT) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(new contents_1.Text(new contents_1.CommonFields(id, id, { keywords: ['kw1', 'kw2'], shortText: id }), 'Dummy text for ' + id, this.buttons()));
        });
    }
    handoff(id, {} = context_1.DEFAULT_CONTEXT) {
        return __awaiter(this, void 0, void 0, function* () {
            const queue = new contents_1.Queue(new contents_1.CommonFields(id, id), id);
            return Promise.resolve(new contents_1.Handoff(new contents_1.CommonFields(id, id), this.buttonCallbacks[0], 'Dummy message for ' + id, 'Dummy handofFailfMessage for ' + id, queue));
        });
    }
    custom(id, {} = context_1.DEFAULT_CONTEXT) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(new contents_1.Custom(id, id, {}));
        });
    }
    chitchat(id, context = context_1.DEFAULT_CONTEXT) {
        return this.text(id, context);
    }
    startUp(id, {} = context_1.DEFAULT_CONTEXT) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(new contents_1.StartUp(new contents_1.CommonFields(id, id), DummyCMS.IMG, 'Dummy text for ' + id, this.buttons()));
        });
    }
    static buttonFromCallback(callback) {
        const id = callback.payload || callback.url;
        return new contents_1.Button(id, id, 'button text for ' + id, callback);
    }
    createElement(id, callback) {
        return new contents_1.Element(id, [DummyCMS.buttonFromCallback(callback)], 'Title for ' + id, 'subtitle', DummyCMS.IMG);
    }
    url(id, {} = context_1.DEFAULT_CONTEXT) {
        return Promise.resolve(new contents_1.Url(new contents_1.CommonFields(id, id, { shortText: 'button text for' + id }), `http://url.${id}`));
    }
    payload(id, {} = context_1.DEFAULT_CONTEXT) {
        return Promise.resolve(new contents_1.Payload(new contents_1.CommonFields(id, id), 'Dummy payload for ' + id));
    }
    image(id, {} = context_1.DEFAULT_CONTEXT) {
        return Promise.resolve(new contents_1.Image(new contents_1.CommonFields(id, id), DummyCMS.IMG));
    }
    queue(id, {} = context_1.DEFAULT_CONTEXT) {
        return Promise.resolve(new contents_1.Queue(new contents_1.CommonFields(id, id), id));
    }
    topContents(model, context, filter, paging) {
        return Promise.resolve([]);
    }
    contentsWithKeywords({} = context_1.DEFAULT_CONTEXT, paging) {
        const contents = this.buttonCallbacks.map((cb, id) => {
            const button = DummyCMS.buttonFromCallback(cb);
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            return new search_result_1.SearchCandidate(cb.asContentId(), new contents_1.CommonFields(String(id), button.name, {
                shortText: button.text,
                keywords: [
                    'keyword for ' + (button.callback.payload || button.callback.url),
                ],
            }));
        });
        return Promise.resolve(contents);
    }
    schedule(id, context) {
        const schedule = new time.Schedule('Europe/Madrid');
        return Promise.resolve(new contents_1.ScheduleContent(new contents_1.CommonFields(id, 'name'), schedule));
    }
    asset(id, context) {
        return Promise.resolve(new contents_1.Asset(id, `http://url.${id}`, {
            name: `${id} title`,
            fileName: `${id} fileName`,
            description: `${id} description`,
            type: `${id} type`,
        }));
    }
    dateRange(id, context) {
        const now = new Date();
        const dateRange = new time.DateRange('daterange name', now, now);
        return Promise.resolve(new contents_1.DateRangeContent(new contents_1.CommonFields(id, dateRange.name), dateRange));
    }
    buttons() {
        return this.buttonCallbacks.map(DummyCMS.buttonFromCallback);
    }
    content(id, context = context_1.DEFAULT_CONTEXT) {
        return this.text(id, context);
    }
    contents(contentType, context, paging) {
        return Promise.resolve([]);
    }
    assets(context) {
        return Promise.resolve([]);
    }
}
exports.DummyCMS = DummyCMS;
DummyCMS.IMG = 'this_image_does_not_exist.png';
DummyCMS.PDF = 'this_doc_does_not_exist.pdf';
//# sourceMappingURL=cms-dummy.js.map