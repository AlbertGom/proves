"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilteredCMS = void 0;
const index_1 = require("../index");
/**
 * Decorator which applies a recursive transformation to MessageContent before being delivered by CMS
 */
class FilteredCMS {
    constructor(cms, filter) {
        this.cms = cms;
        this.filter = filter;
    }
    filterContent(content, clazz, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const converted = yield this.filter.filterContent(content, context);
            if (clazz && !(converted instanceof clazz)) {
                throw new index_1.CmsException("FilteredCMS requires that filters don't change the type of the MessageContent");
            }
            return converted;
        });
    }
    filterContents(contents, context) {
        return Promise.all(contents.map(c => {
            if (c instanceof index_1.MessageContent) {
                return this.filterContent(c, undefined, context);
            }
            return c;
        }));
    }
    carousel(id, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = yield this.cms.carousel(id, context);
            return this.filterContent(content, index_1.Carousel, context);
        });
    }
    document(id, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = yield this.cms.document(id, context);
            return this.filterContent(content, index_1.Document, context);
        });
    }
    text(id, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = yield this.cms.text(id, context);
            return this.filterContent(content, index_1.Text, context);
        });
    }
    chitchat(id, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = yield this.cms.text(id, context);
            return this.filterContent(content, index_1.Chitchat, context);
        });
    }
    startUp(id, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = yield this.cms.startUp(id, context);
            return this.filterContent(content, index_1.StartUp, context);
        });
    }
    image(id, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = yield this.cms.image(id, context);
            return this.filterContent(content, index_1.Image, context);
        });
    }
    handoff(id, context) {
        return this.cms.handoff(id, context);
    }
    custom(id, context) {
        return this.cms.custom(id, context);
    }
    url(id, context) {
        return this.cms.url(id, context);
    }
    payload(id, context) {
        return this.cms.payload(id, context);
    }
    queue(id, context) {
        return this.cms.queue(id, context);
    }
    button(id, context) {
        // TODO convert
        return this.cms.button(id, context);
    }
    element(id, context) {
        // TODO convert
        return this.cms.element(id, context);
    }
    content(id, context) {
        return this.cms.content(id, context);
    }
    contentsWithKeywords(context, paging) {
        return this.cms.contentsWithKeywords(context, paging);
    }
    topContents(model, context, filter, paging) {
        return __awaiter(this, void 0, void 0, function* () {
            const contents = yield this.cms.topContents(model, context, filter, paging);
            return this.filterContents(contents, context);
        });
    }
    contents(contentType, context, paging) {
        return __awaiter(this, void 0, void 0, function* () {
            const contents = yield this.cms.contents(contentType, context, paging);
            return this.filterContents(contents, context);
        });
    }
    assets(context) {
        return this.cms.assets(context);
    }
    schedule(id, context) {
        return this.cms.schedule(id, context);
    }
    dateRange(id, context) {
        return this.cms.dateRange(id, context);
    }
    asset(id, context) {
        return this.cms.asset(id, context);
    }
}
exports.FilteredCMS = FilteredCMS;
//# sourceMappingURL=cms-filter.js.map