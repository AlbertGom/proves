import { Button, Carousel, Element, Image, MessageContent, StartUp, Text } from '../contents';
import { Context } from '../context';
export declare type MessageContentFilter<T> = (t: T, context: Context) => Promise<MessageContent>;
export declare type FilterByMessageContentType = {
    carousel?: MessageContentFilter<Carousel>;
    image?: MessageContentFilter<Image>;
    startUp?: MessageContentFilter<StartUp>;
    text?: MessageContentFilter<Text>;
};
export declare function enableDependingOnContext(inFilter: FilterByMessageContentType, enabler: (ctx: Context) => boolean): FilterByMessageContentType;
/**
 * Recursively (through followUps chain) maps a MessageContent to another
 */
export declare class RecursiveMessageContentFilter {
    private readonly filters;
    constructor(filters: FilterByMessageContentType);
    filterContent(content: MessageContent, context: Context | undefined): Promise<MessageContent>;
    private filterTop;
}
export declare type StringFilter = (txt: string) => string;
export declare const buttonsTextFilter: (filter: StringFilter) => (buttons: Button[]) => Button[];
export declare const elementsTextFilter: (filter: StringFilter) => (elements: Element[]) => Element[];
/**
 * Applies a transformation to all visible string in a MessageContent
 */
export declare const stringsFilter: (filter: StringFilter) => {
    text: (text: Text) => Promise<Text>;
    carousel: (carousel: Carousel) => Promise<Carousel>;
    startUp: (startUp: StartUp) => Promise<StartUp>;
};
