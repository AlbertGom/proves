"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HandoffBuilder = exports.DocumentBuilder = exports.ImageBuilder = exports.StartUpBuilder = exports.CarouselBuilder = exports.ElementBuilder = exports.TextBuilder = exports.TopContentBuilder = void 0;
const contents_1 = require("../contents");
/**
 * Builder for Contents (which are immutable) which allow:
 * - Setting the optional fields individually and in any order
 * - Easing the implementation of the RndXXXBuilder classes at src/cms/test-helpers/builders.ts
 */
class ContentBuilder {
    constructor(id, name) {
        this.id = id;
        this.name = name;
    }
    withId(id) {
        this.id = id;
        return this;
    }
    withName(name) {
        this.name = name;
        return this;
    }
}
class TopContentBuilder extends ContentBuilder {
    constructor() {
        super(...arguments);
        this.keywords = [];
    }
    withShortText(shortText) {
        this.shortText = shortText;
        return this;
    }
    withKeywords(kw) {
        this.keywords = kw;
        return this;
    }
    buildCommonFields() {
        return new contents_1.CommonFields(this.id, this.name, {
            shortText: this.shortText,
            keywords: this.keywords,
            followUp: this.followUp,
        });
    }
}
exports.TopContentBuilder = TopContentBuilder;
class MessageContentBuilder extends TopContentBuilder {
    withFollowUp(followUp) {
        this.followUp = followUp;
        return this;
    }
}
class TextBuilder extends MessageContentBuilder {
    constructor(id, name, text) {
        super(id, name);
        this.text = text;
        this.buttons = [];
        this.buttonsStyle = contents_1.ButtonStyle.BUTTON;
    }
    withText(text) {
        this.text = text;
        return this;
    }
    withButtons(buttons) {
        this.buttons = buttons;
        return this;
    }
    withButtonStyle(style) {
        this.buttonsStyle = style;
        return this;
    }
    build() {
        return new contents_1.Text(this.buildCommonFields(), this.text, this.buttons, this.buttonsStyle);
    }
}
exports.TextBuilder = TextBuilder;
class ElementBuilder {
    constructor(id) {
        this.id = id;
        this.buttons = [];
    }
    withTitle(title) {
        this.title = title;
        return this;
    }
    withSubtitle(subtitle) {
        this.subtitle = subtitle;
        return this;
    }
    withImgUrl(imgUrl) {
        this.imgUrl = imgUrl;
        return this;
    }
    withButtons(buttons) {
        this.buttons = buttons;
        return this;
    }
    build() {
        return new contents_1.Element(this.id, this.buttons, this.title || '', this.subtitle, this.imgUrl);
    }
}
exports.ElementBuilder = ElementBuilder;
class CarouselBuilder extends MessageContentBuilder {
    constructor(id, name) {
        super(id, name);
        this.elements = [];
    }
    withElementBuilder(elementId) {
        if (!this.elementBuilder) {
            this.elementBuilder = new ElementBuilder(elementId);
        }
        return this.elementBuilder;
    }
    addElement() {
        if (!this.elementBuilder) {
            throw new Error('You need to previously call withElementBuilder');
        }
        this.elements.push(this.elementBuilder.build());
        return this;
    }
    build() {
        return new contents_1.Carousel(this.buildCommonFields(), this.elements);
    }
}
exports.CarouselBuilder = CarouselBuilder;
class StartUpBuilder extends MessageContentBuilder {
    constructor(id, name, text) {
        super(id, name);
        this.text = text;
        this.buttons = [];
    }
    withText(text) {
        this.text = text;
        return this;
    }
    withButtons(buttons) {
        this.buttons = buttons;
        return this;
    }
    build() {
        return new contents_1.StartUp(this.buildCommonFields(), this.imgUrl, this.text, this.buttons);
    }
}
exports.StartUpBuilder = StartUpBuilder;
class ImageBuilder extends MessageContentBuilder {
    constructor(id, name, imgUrl) {
        super(id, name);
        this.imgUrl = imgUrl;
    }
    withUrl(url) {
        this.imgUrl = url;
        return this;
    }
    build() {
        return new contents_1.Image(this.buildCommonFields(), this.imgUrl);
    }
}
exports.ImageBuilder = ImageBuilder;
class DocumentBuilder extends MessageContentBuilder {
    constructor(id, name, docUrl) {
        super(id, name);
        this.docUrl = docUrl;
    }
    withUrl(url) {
        this.docUrl = url;
        return this;
    }
    build() {
        return new contents_1.Document(this.buildCommonFields(), this.docUrl);
    }
}
exports.DocumentBuilder = DocumentBuilder;
class HandoffBuilder extends MessageContentBuilder {
    constructor(id, name, onFinish) {
        super(id, name);
        this.onFinish = onFinish;
    }
    withHandoffMessage(message) {
        this.message = message;
        return this;
    }
    withHandoffFailMessage(failMessage) {
        this.failMessage = failMessage;
        return this;
    }
    withQueue(queue) {
        this.queue = queue;
        return this;
    }
    withAgent(agent) {
        this.agent = agent;
        return this;
    }
    withShadowing(shadowing) {
        this.shadowing = shadowing;
        return this;
    }
    build() {
        return new contents_1.Handoff(this.buildCommonFields(), this.onFinish, this.message, this.failMessage, this.queue, this.agent, this.shadowing);
    }
}
exports.HandoffBuilder = HandoffBuilder;
//# sourceMappingURL=content-factories.js.map