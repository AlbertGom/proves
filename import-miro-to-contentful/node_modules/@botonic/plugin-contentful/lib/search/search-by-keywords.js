"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchByKeywords = void 0;
const nlp_1 = require("../nlp");
class SearchByKeywords {
    constructor(cms, normalizer, keywordsOptions = {}) {
        this.cms = cms;
        this.normalizer = normalizer;
        this.keywordsOptions = keywordsOptions;
    }
    /**
     * It will assign a score based on the ratio of the matched substring length wit respect to the input length
     */
    searchContentsFromInput(inputText, matchType, context, paging) {
        return __awaiter(this, void 0, void 0, function* () {
            nlp_1.checkLocale(context.locale);
            const contentsWithKeywords = yield this.cms.contentsWithKeywords(context, paging);
            const options = this.keywordsOptions[context.locale] ||
                this.keywordsOptions[nlp_1.languageFromLocale(context.locale)] ||
                new nlp_1.KeywordsOptions();
            const kws = new nlp_1.KeywordsParser(context.locale, matchType, this.normalizer, options);
            contentsWithKeywords.forEach(content => kws.addCandidate(content, content.common.keywords));
            const results = kws.findCandidatesWithKeywordsAt(inputText);
            return results.map(res => {
                const score = res.match.length / inputText.raw.length;
                return res.candidate.withResult(res.match, score);
            });
        });
    }
    /**
     * Chitchat contents need special treatment: does not make sense to ask user to disambiguate,
     * have less priority than non-chitchat contents,...
     * @return which contents must be displayed
     */
    filterChitchat(words, results) {
        const isChitChat = (cc) => cc.getCallbackIfChitchat();
        const chitchats = results.filter(isChitChat);
        if (chitchats.length == 0) {
            return results;
        }
        if (chitchats.length < results.length) {
            const noChitchats = results.filter(c => !isChitChat(c));
            if (chitchats[0].match.length - noChitchats[0].match.length < 2) {
                return noChitchats;
            }
        }
        // all are chitchats
        const estimatedNoChitchatWords = words.length - chitchats.length * 2;
        if (estimatedNoChitchatWords > 2) {
            // avoid that a sentence with chitchat and a question without recognized keywords is answered as chitchat
            return [];
        }
        return [chitchats[0]];
    }
}
exports.SearchByKeywords = SearchByKeywords;
//# sourceMappingURL=search-by-keywords.js.map