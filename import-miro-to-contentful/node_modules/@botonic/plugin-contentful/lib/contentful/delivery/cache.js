"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CachedClientApi = void 0;
const memoizee_1 = __importDefault(require("memoizee"));
const util_1 = require("../../util");
const memoizer_1 = require("../../util/memoizer");
class CachedClientApi {
    constructor(client, cacheTtlMs = 10000, errorReport) {
        this.client = client;
        this.cacheTtlMs = cacheTtlMs;
        this.errorReport = errorReport;
        this.getAsset = this.memoize(client.getAsset.bind(client), 2);
        this.getAssets = this.memoize(client.getAssets.bind(client), 1);
        this.getEntries = this.memoize(client.getEntries.bind(client), 1);
        this.getEntry = this.memoize(client.getEntry.bind(client), 2);
        this.getContentType = this.memoize(client.getContentType.bind(client), 1);
    }
    memoize(func, functionLength) {
        const memo = memoizee_1.default(func, this.options(functionLength));
        const dec = util_1.rethrowDecorator(memo, (e, ...args) => __awaiter(this, void 0, void 0, function* () {
            yield this.errorReport('Error calling Contentful API', String(func), args, e);
            // sleep required to ensure that after a failed invocation, the next one also always fails
            // https://github.com/medikoo/memoizee/issues/117
            return util_1.sleep(0);
        }));
        return dec;
    }
    options(length) {
        return {
            promise: true,
            primitive: true,
            maxAge: this.cacheTtlMs == CachedClientApi.NO_EXPIRATION
                ? undefined
                : this.cacheTtlMs,
            length,
            normalizer: memoizer_1.jsonNormalizer,
        };
    }
    static normalizer(...args) {
        return args
            .map((arg) => JSON.stringify(arg))
            .reduce((a, b) => a + b);
    }
}
exports.CachedClientApi = CachedClientApi;
CachedClientApi.NO_EXPIRATION = -1;
//# sourceMappingURL=cache.js.map