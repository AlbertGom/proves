"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentfulInfo = void 0;
const cms_1 = require("../cms");
const cms_info_1 = require("../cms/cms-info");
const enums_1 = require("../util/enums");
const delivery_utils_1 = require("./delivery-utils");
class ContentfulInfo {
    constructor(options) {
        this.options = options;
        this.client = delivery_utils_1.createContentfulClientApi(options);
    }
    contentTypes() {
        return __awaiter(this, void 0, void 0, function* () {
            const models = yield this.client.getContentTypes();
            return models.items
                .map(m => {
                if (enums_1.isOfType(m.sys.id, cms_1.ContentType)) {
                    return m.sys.id;
                }
                return undefined;
            })
                .filter(m => !!m);
        });
    }
    defaultLocale() {
        return __awaiter(this, void 0, void 0, function* () {
            const locales = yield this.locales();
            for (const locale of Object.values(locales)) {
                if (locale.isDefault) {
                    return locale;
                }
            }
            throw new Error(`No default locale found`);
        });
    }
    locales() {
        return __awaiter(this, void 0, void 0, function* () {
            const locales = (yield this.client.getLocales()).items;
            return locales
                .map(l => new cms_info_1.LocaleInfo(l.code, l.name, l.fallbackCode || undefined, l.default))
                .reduce((newObj, l) => {
                newObj[l.code] = l;
                return newObj;
            }, {});
        });
    }
}
exports.ContentfulInfo = ContentfulInfo;
//# sourceMappingURL=info-contentful.js.map