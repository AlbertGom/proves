"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContentfulClientApi = exports.ContentfulEntryUtils = exports.AdaptorDeliveryApi = void 0;
const contentful = __importStar(require("contentful"));
const cms_1 = require("../cms");
const delivery_utils_1 = require("./delivery-utils");
/**
 * Manages the {@link Context}, parses Content's Id and ContentType from the Contentful entries...
 */
class AdaptorDeliveryApi {
    constructor(client, options) {
        this.client = client;
        this.options = options;
    }
    getAsset(id, context, query) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.getAsset(id, this.queryFromContext(context, query));
        });
    }
    getAssets(context, query) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.getAssets(this.queryFromContext(context, query));
        });
    }
    getEntry(id, context, query = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.client.getEntry(id, this.queryFromContext(context, query));
        });
    }
    getEntries(context, query = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.client.getEntries(this.queryFromContext(context, query));
            }
            catch (e) {
                throw delivery_utils_1.convertContentfulException(e, query);
            }
        });
    }
    getContentType(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return this.client.getContentType(id);
            }
            catch (e) {
                console.error(`ERROR in getContentType for id ${id}:`, e);
                throw e;
            }
        });
    }
    queryFromContext(context, query = {}) {
        const locale = this.options.cmsLocale
            ? this.options.cmsLocale(context.locale)
            : context.locale;
        if (locale) {
            query['locale'] = locale;
        }
        return query;
    }
}
exports.AdaptorDeliveryApi = AdaptorDeliveryApi;
class ContentfulEntryUtils {
    static getContentId(entry) {
        return cms_1.ContentId.create(ContentfulEntryUtils.getContentModel(entry), entry.sys.id);
    }
    /**
     * Will be false for broken references, or when we have only fetched
     * the full Entry tree
     */
    static isFullEntry(entry) {
        return !!entry.fields;
    }
    static getContentModel(entry) {
        // https://blog.oio.de/2014/02/28/typescript-accessing-enum-values-via-a-string/
        if (!entry.sys.contentType) {
            throw new cms_1.CmsException(`Entry '${entry.sys.id}' not fully loaded or referencing a deleted content`);
        }
        return entry.sys.contentType.sys.id;
    }
}
exports.ContentfulEntryUtils = ContentfulEntryUtils;
function createContentfulClientApi(options) {
    const params = {
        space: options.spaceId,
        accessToken: options.accessToken,
        timeout: options.timeoutMs,
    };
    if (options.environment) {
        params.environment = options.environment;
    }
    const client = contentful.createClient(params);
    return client;
}
exports.createContentfulClientApi = createContentfulClientApi;
//# sourceMappingURL=delivery-api.js.map