"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FollowUpDelivery = exports.DeliveryWithFollowUp = void 0;
const cms = __importStar(require("../../cms"));
const cms_1 = require("../../cms");
const content_delivery_1 = require("../content-delivery");
const delivery_utils_1 = require("../delivery-utils");
class DeliveryWithFollowUp extends content_delivery_1.TopContentDelivery {
    // cannot be set in constructor because there's a circular dependency Model <-> Followup
    setFollowUp(followUp) {
        this.followUp = followUp;
    }
    getFollowUp() {
        console.assert(this.followUp, 'you need to call setFollowUp from Contentful constructor');
        return this.followUp;
    }
}
exports.DeliveryWithFollowUp = DeliveryWithFollowUp;
class FollowUpDelivery {
    constructor(delivery, carousel, text, image, startUp) {
        this.delivery = delivery;
        this.carousel = carousel;
        this.text = text;
        this.image = image;
        this.startUp = startUp;
    }
    fromEntry(followUp, context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!followUp) {
                return Promise.resolve(undefined);
            }
            try {
                return this.fromEntryCore(followUp, context);
            }
            catch (e) {
                throw new cms_1.CmsException(`Error loading followup with id '${followUp.sys.id}'`, e);
            }
        });
    }
    // TODO we should detect cycles to avoid infinite recursion
    fromEntryCore(followUp, context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!followUp.sys.contentType) {
                followUp = yield this.delivery.getEntry(followUp.sys.id, context);
            }
            switch (delivery_utils_1.ContentfulEntryUtils.getContentModel(followUp)) {
                case cms_1.ContentType.CAROUSEL:
                    // here followUp already has its fields set, but not yet its element fields
                    return this.carousel.carousel(followUp.sys.id, context);
                case cms.ContentType.TEXT:
                    return this.text.fromEntry(followUp, context);
                case cms.ContentType.IMAGE:
                    return this.image.fromEntry(followUp, context);
                case cms.ContentType.STARTUP:
                    return this.startUp.fromEntry(followUp, context);
                default:
                    throw new Error(`Unexpected followUp type ${followUp.sys.type}`);
            }
        });
    }
    commonFields(entry, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const followUp = yield this.getFollowUp(entry, context);
            return delivery_utils_1.ContentfulEntryUtils.commonFieldsFromEntry(entry, followUp);
        });
    }
    getFollowUp(entry, context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (entry.fields.followup) {
                const followUp = entry.fields.followup.sys.contentType
                    ? entry.fields.followup
                    : yield this.delivery.getEntry(entry.fields.followup.sys.id, context);
                return (yield this.fromEntry(followUp, context));
            }
            return undefined;
        });
    }
}
exports.FollowUpDelivery = FollowUpDelivery;
//# sourceMappingURL=follow-up.js.map