"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ButtonDelivery = void 0;
const cms = __importStar(require("../../cms"));
const cms_1 = require("../../cms");
const cms_2 = require("../../cms/cms");
const enums_1 = require("../../util/enums");
const content_delivery_1 = require("../content-delivery");
const delivery_utils_1 = require("../delivery-utils");
const callback_delivery_1 = require("./callback-delivery");
class ButtonDelivery extends content_delivery_1.ContentDelivery {
    constructor(delivery, resumeErrors) {
        super(cms.ContentType.BUTTON, delivery, resumeErrors);
    }
    button(id, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const entry = yield this.getEntry(id, context);
            return this.fromEntry(entry, context);
        });
    }
    fromReferenceSkipErrors(entries, context) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.asyncMap(context, entries, entry => this.fromReference(entry, context));
        });
    }
    fromReference(entry, context) {
        return __awaiter(this, void 0, void 0, function* () {
            // we could pass the entry to fromId to avoid fetching it again, but it makes
            // the code more complex when the reference is a button
            try {
                return yield this.fromId(entry.sys.id, context);
            }
            catch (e) {
                throw new cms_1.CmsException(`Error loading button with id '${entry.sys.id}'`, e);
            }
        });
    }
    fromId(id, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const entry = yield this.delivery.getEntry(id, context);
            const entryType = delivery_utils_1.ContentfulEntryUtils.getContentModel(entry);
            if (enums_1.isOfType(entryType, cms_2.TopContentType)) {
                return this.fromContentReference(entry, context);
            }
            if (entryType === ButtonDelivery.BUTTON_CONTENT_TYPE) {
                const buttonEntry = entry;
                return this.fromEntry(buttonEntry, context);
            }
            throw new Error(`Unexpected type ${entryType}`);
        });
    }
    fromEntry(buttonEntry, context) {
        var _a;
        if (!buttonEntry.fields.target) {
            throw new cms_1.CmsException(`Button ${this.entryId(buttonEntry)} has no target`);
        }
        // target may be empty if we got it from a reference (delivery does not provide infinite recursive references)
        const callback = callback_delivery_1.getTargetCallback(buttonEntry.fields.target, context);
        return new cms.Button(buttonEntry.sys.id, buttonEntry.fields.name, (_a = buttonEntry.fields.text) !== null && _a !== void 0 ? _a : '', callback);
    }
    // TODO move to a new CmsUtils.buttonToCallback(cms.ContentCallback)?
    fromContentReference(entry, context) {
        const fields = entry.fields;
        const text = fields.shortText || '';
        return new cms.Button(entry.sys.id, fields.name, text, ButtonDelivery.callbackFromEntry(entry));
    }
    static callbackFromEntry(entry) {
        const modelType = delivery_utils_1.ContentfulEntryUtils.getContentModel(entry);
        if (modelType === cms_1.ContentType.URL) {
            return cms.Callback.ofUrl(entry.fields.url || '');
        }
        return new cms.ContentCallback(modelType, entry.sys.id);
    }
}
exports.ButtonDelivery = ButtonDelivery;
ButtonDelivery.BUTTON_CONTENT_TYPE = 'button';
//# sourceMappingURL=button.js.map