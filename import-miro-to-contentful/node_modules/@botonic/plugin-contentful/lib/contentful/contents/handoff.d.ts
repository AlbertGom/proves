import * as contentful from 'contentful';
import * as cms from '../../cms';
import { TopContentDelivery } from '../content-delivery';
import { DeliveryApi } from '../delivery-api';
import { CommonEntryFields } from '../delivery-utils';
import { CallbackTarget } from './callback-delivery';
import { QueueDelivery, QueueFields } from './queue';
export declare class HandoffDelivery extends TopContentDelivery {
    private readonly queueDelivery;
    static REFERENCES_INCLUDE: number;
    constructor(delivery: DeliveryApi, queueDelivery: QueueDelivery, resumeErrors: boolean);
    handoff(id: string, context: cms.Context): Promise<cms.Handoff>;
    private onFinish;
    private queue;
    private agent;
    fromEntry(entry: contentful.Entry<HandoffFields>, context: cms.Context): cms.Handoff;
}
export interface AgentEmailFields {
    agentEmail: string;
}
export interface AgentIdFields {
    agentId: string;
}
declare type AgentTarget = contentful.Entry<AgentEmailFields | AgentIdFields>;
export interface HandoffFields extends CommonEntryFields {
    message?: string;
    failMessage?: string;
    onFinish: CallbackTarget;
    queue?: contentful.Entry<QueueFields>;
    agent?: AgentTarget;
    shadowing?: boolean;
}
export {};
