"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScheduleDelivery = void 0;
const cms_1 = require("../../cms");
const time = __importStar(require("../../time"));
const content_delivery_1 = require("../content-delivery");
const delivery_utils_1 = require("../delivery-utils");
class ScheduleDelivery extends content_delivery_1.TopContentDelivery {
    constructor(delivery, resumeErrors) {
        super(cms_1.ContentType.SCHEDULE, delivery, resumeErrors);
    }
    schedule(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const f = yield this.getEntry(id, cms_1.DEFAULT_CONTEXT, {
                include: ScheduleDelivery.REFERENCES_INCLUDE,
            });
            return this.fromEntry(f);
        });
    }
    fromEntry(entry) {
        try {
            this.checkEntry(entry);
            const schedule = new time.Schedule(time.Schedule.TZ_CET); // TODO allow configuration
            this.addDaySchedules(schedule, entry.fields);
            this.addExceptions(schedule, entry.fields.exceptions);
            return delivery_utils_1.addCustomFields(new cms_1.ScheduleContent(delivery_utils_1.ContentfulEntryUtils.commonFieldsFromEntry(entry), schedule), entry.fields, [
                'exceptions',
                'partition',
                'mondays',
                'tuesdays',
                'wednesdays',
                'thursdays',
                'fridays',
                'saturdays',
                'sundays',
            ]);
        }
        catch (e) {
            throw new cms_1.CmsException(`Error loading Scheduler '${entry.sys.id}'`, e);
        }
    }
    addDaySchedules(schedule, fields) {
        const days = [
            fields.sundays,
            fields.mondays,
            fields.tuesdays,
            fields.wednesdays,
            fields.thursdays,
            fields.fridays,
            fields.saturdays,
        ];
        for (const day in days) {
            if (!days[day]) {
                continue;
            }
            const daySchedule = this.createDaySchedule(schedule, days[day]);
            schedule.addDaySchedule(+day, daySchedule);
        }
    }
    createDaySchedule(sched, hourRanges) {
        const timeRanges = hourRanges.map(hr => {
            try {
                this.checkEntry(hr);
                return new time.TimeRange(sched.createHourAndMinute(hr.fields.fromHour, hr.fields.fromMinute), sched.createHourAndMinute(hr.fields.toHour, hr.fields.toMinute));
            }
            catch (e) {
                throw new cms_1.CmsException(`Error loading hour range '${hr.sys.id}'`, e);
            }
        });
        return new time.DaySchedule(timeRanges);
    }
    addExceptions(schedule, exceptions) {
        var _a;
        if (!exceptions) {
            return;
        }
        for (const exception of exceptions) {
            try {
                this.checkEntry(exception);
                const timeRanges = this.createDaySchedule(schedule, exception.fields.hourRanges || []);
                const dateStr = exception.fields.date.split('-');
                const date = new Date(+dateStr[0], +dateStr[1] - 1, +dateStr[2]);
                schedule.addException(date, timeRanges);
            }
            catch (e) {
                this.logOrThrow(`Loading Schedule Exception '${exception.sys.id}' (name '${(_a = exception.fields) === null || _a === void 0 ? void 0 : _a.name}')`, {}, e, delivery_utils_1.ContentfulEntryUtils.getContentId(exception));
            }
        }
    }
}
exports.ScheduleDelivery = ScheduleDelivery;
ScheduleDelivery.REFERENCES_INCLUDE = 2;
//# sourceMappingURL=schedule.js.map