"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HandoffDelivery = void 0;
const cms = __importStar(require("../../cms"));
const cms_1 = require("../../cms");
const content_delivery_1 = require("../content-delivery");
const delivery_utils_1 = require("../delivery-utils");
const callback_delivery_1 = require("./callback-delivery");
const queue_1 = require("./queue");
class HandoffDelivery extends content_delivery_1.TopContentDelivery {
    constructor(delivery, queueDelivery, resumeErrors) {
        super(cms_1.ContentType.HANDOFF, delivery, resumeErrors);
        this.queueDelivery = queueDelivery;
    }
    handoff(id, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const entry = yield this.getEntry(id, context, { include: HandoffDelivery.REFERENCES_INCLUDE });
            return this.fromEntry(entry, context);
        });
    }
    onFinish(entry, context) {
        if (!entry.fields.onFinish) {
            throw new cms_1.CmsException(`Handoff ${this.entryId(entry)} has no onFinish`);
        }
        return callback_delivery_1.getTargetCallback(entry.fields.onFinish, context);
    }
    queue(entry) {
        if (!entry.fields.queue)
            return undefined;
        return this.queueDelivery.fromEntry(entry.fields.queue);
    }
    agent(entry) {
        if (!entry.fields.agent)
            return undefined;
        const AGENT_EMAIL_TYPE = 'agentEmail';
        const AGENT_ID_TYPE = 'agentId';
        const model = delivery_utils_1.ContentfulEntryUtils.getContentModel(entry.fields.agent);
        switch (model) {
            case AGENT_EMAIL_TYPE: {
                const agent = entry.fields.agent;
                return new cms_1.HandoffAgentEmail(agent.fields.agentEmail);
            }
            case AGENT_ID_TYPE: {
                const agent = entry.fields.agent;
                return new cms_1.HandoffAgentId(agent.fields.agentId);
            }
        }
        return undefined;
    }
    fromEntry(entry, context) {
        const fields = entry.fields;
        const common = delivery_utils_1.ContentfulEntryUtils.commonFieldsFromEntry(entry);
        return delivery_utils_1.addCustomFields(new cms.Handoff(common, this.onFinish(entry, context), fields.message, fields.failMessage, this.queue(entry), this.agent(entry), fields.shadowing), fields, ['onFinish', 'agent', 'queue']);
    }
}
exports.HandoffDelivery = HandoffDelivery;
HandoffDelivery.REFERENCES_INCLUDE = queue_1.QueueDelivery.REFERENCES_INCLUDE + 1;
//# sourceMappingURL=handoff.js.map