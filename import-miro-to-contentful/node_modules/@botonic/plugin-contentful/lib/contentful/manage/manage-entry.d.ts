import { ClientAPI } from 'contentful-management/dist/typings/create-contentful-api';
import { Entry } from 'contentful-management/dist/typings/entities/entry';
import { Environment } from 'contentful-management/dist/typings/entities/environment';
import { ContentId, ContentType } from '../../cms';
import { ContentFieldType } from '../../manage-cms/fields';
import { ManageContext } from '../../manage-cms/manage-context';
import * as nlp from '../../nlp';
import { ContentfulOptions } from '../../plugin';
export declare class ManageContentfulEntry {
    readonly options: ContentfulOptions;
    readonly manage: ClientAPI;
    readonly environment: Promise<Environment>;
    constructor(options: ContentfulOptions, manage: ClientAPI, environment: Promise<Environment>);
    updateFields(context: ManageContext, contentId: ContentId, fields: {
        [contentFieldType: string]: any;
    }): Promise<{
        [contentFieldType: string]: any;
    }>;
    createContent(context: ManageContext, model: ContentType, id: string): Promise<void>;
    deleteContent(context: ManageContext, contentId: ContentId): Promise<void>;
    private checkOverwrite;
    copyField(context: ManageContext, contentId: ContentId, fieldType: ContentFieldType, fromLocale: nlp.Locale, onlyIfTargetEmpty: boolean): Promise<void>;
    private writeEntry;
    getEntry(environment: Environment, contentId: ContentId): Promise<Entry>;
    private convertValueType;
    private getEntryLink;
}
