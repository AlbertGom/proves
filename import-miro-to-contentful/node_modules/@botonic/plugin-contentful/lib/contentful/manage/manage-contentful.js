"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManageContentful = void 0;
const contentful_management_1 = require("contentful-management");
const manage_asset_1 = require("./manage-asset");
const manage_entry_1 = require("./manage-entry");
class ManageContentful {
    constructor(options) {
        this.options = options;
        this.manage = this.createClient();
        this.environment = this.getEnvironment();
        this.manageAsset = new manage_asset_1.ManageContentfulAsset(options, this.manage, this.environment);
        this.manageEntry = new manage_entry_1.ManageContentfulEntry(options, this.manage, this.environment);
    }
    createClient() {
        return contentful_management_1.createClient({
            accessToken: this.options.accessToken,
            timeout: this.options.timeoutMs,
        });
    }
    getEnvironment() {
        return __awaiter(this, void 0, void 0, function* () {
            const space = yield this.manage.getSpace(this.options.spaceId);
            if (!this.options.environment) {
                throw new Error('Please specify environment in ContentfulOptions');
            }
            return yield space.getEnvironment(this.options.environment);
        });
    }
    deleteContent(context, contentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.manageEntry.deleteContent(context, contentId);
        });
    }
    createContent(context, model, id) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.manageEntry.createContent(context, model, id);
        });
    }
    updateFields(context, contentId, fields) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.manageEntry.updateFields(context, contentId, fields);
        });
    }
    copyField(context, contentId, fieldType, fromLocale, onlyIfTargetEmpty) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.manageEntry.copyField(context, contentId, fieldType, fromLocale, onlyIfTargetEmpty);
        });
    }
    removeAssetFile(context, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.manageAsset.removeAssetFile(context, assetId);
        });
    }
    copyAssetFile(context, assetId, fromLocale) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.manageAsset.copyAssetFile(context, assetId, fromLocale);
        });
    }
    createAsset(context, file, info) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.manageAsset.createAsset(context, file, info);
        });
    }
    removeAsset(context, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.manageAsset.removeAsset(context, assetId);
        });
    }
}
exports.ManageContentful = ManageContentful;
//# sourceMappingURL=manage-contentful.js.map