"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpaceExport = void 0;
// eslint-disable-next-line node/no-missing-import
const schema = __importStar(require("contentful-import/dist/utils/schema"));
const fs_1 = __importDefault(require("fs"));
const joi = __importStar(require("joi"));
/**
 * Allows modifying contentful spaces exported with "contentful space export"
 */
class SpaceExport {
    constructor(jsonObject) {
        SpaceExport.validate(jsonObject);
        this.payload = jsonObject;
    }
    getLocale(locale) {
        if (!this.payload.locales) {
            return undefined;
        }
        return this.payload.locales.find(loc => loc.code == locale);
    }
    getDefaultLocale() {
        if (!this.payload.locales) {
            return undefined;
        }
        for (const loc of this.payload.locales) {
            if (loc.default) {
                return loc;
            }
        }
        return undefined;
    }
    static validate(jsonObject) {
        const err = joi.validate(SpaceExport.hideFieldsWithBadSchema(jsonObject), schema.payloadSchema);
        if (err.error) {
            throw new Error(err.error.message);
        }
    }
    static hideFieldsWithBadSchema(jsonObject) {
        // contentTypes fails with types withs items
        // see https://github.com/contentful/contentful-import/issues/262
        const clone = Object.assign({}, jsonObject);
        for (const field of ['contentTypes', 'assets', 'editorInterfaces']) {
            delete clone[field];
        }
        return clone;
    }
    static fromJsonFile(filename) {
        //we could use Joi schemas in node_modules/contentful-import/dist/utils/schema.js
        const json = JSON.parse(fs_1.default.readFileSync(filename, 'utf8'));
        return new SpaceExport(json);
    }
    write(filename) {
        const json = JSON.stringify(this.payload, undefined, 2);
        fs_1.default.writeFileSync(filename, json, 'utf8');
    }
}
exports.SpaceExport = SpaceExport;
//# sourceMappingURL=space-export.js.map