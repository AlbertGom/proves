import * as cms from '../cms';
import { ButtonStyle } from '../cms';
export declare class RenderOptions {
    followUpDelaySeconds: number;
    maxButtons: number;
    maxQuickReplies: number;
    /** Some integrations fail when a field is empty*/
    replaceEmptyStringsWith?: string;
    defaultButtonsStyle?: ButtonStyle;
}
export interface BotonicMsg {
    type: 'carousel' | 'text' | 'image' | 'document';
    delay?: number;
    data: any;
}
export declare type BotonicMsgs = BotonicMsg | BotonicMsgArray;
export interface BotonicMsgArray extends Array<BotonicMsgs> {
}
export interface BotonicText extends BotonicMsg {
    buttons: any;
}
export interface BotonicDocument extends BotonicMsg {
    src: string;
}
export declare class BotonicMsgConverter {
    readonly options: RenderOptions;
    constructor(options?: Partial<RenderOptions>);
    convert(content: cms.MessageContent, delayS?: number): BotonicMsgs;
    carousel(carousel: cms.Carousel, delayS?: number): BotonicMsgs;
    private element;
    private convertButtons;
    text(text: cms.Text, delayS?: number): BotonicMsgs;
    startUp(startUp: cms.StartUp, delayS?: number): BotonicMsgs;
    image(img: cms.Image, delayS?: number): BotonicMsgs;
    document(doc: cms.Document, delayS?: number): BotonicMsgs;
    private appendFollowUp;
    private followUp;
    private str;
}
