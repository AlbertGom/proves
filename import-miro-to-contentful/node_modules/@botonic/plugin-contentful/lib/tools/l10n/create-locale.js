"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpaceManager = void 0;
const contentful = __importStar(require("contentful-management"));
class SpaceManager {
    constructor(spaceId, environment, accessToken) {
        this.spaceId = spaceId;
        this.environment = environment;
        this.accessToken = accessToken;
    }
    /**
     * Creates a locale. Useful for locales which don't exist in contentful.com
     * (eg en_CH)
     */
    createLocale(longName, code, fallbackCode) {
        return __awaiter(this, void 0, void 0, function* () {
            const client = contentful.createClient({
                accessToken: this.accessToken,
            });
            yield client
                .getSpace(this.spaceId)
                .then(space => space.getEnvironment(this.environment))
                .then(environment => environment.createLocale({
                name: longName,
                code: code,
                // @ts-ignore a bug fallbackCode type?
                fallbackCode,
                optional: true,
            }))
                .then(locale => console.log(`Created locale ${locale.code}`))
                .catch(console.error);
        });
    }
}
exports.SpaceManager = SpaceManager;
if (process.argv.length < 7 || process.argv[2] == '--help') {
    console.warn(`Usage: space_id environment access_token locale_name locale_code`);
    console.warn('It creates a new locale without fallback in contentful.com with the specified name' +
        '. Useful for locales not available such as English on a non-English speaking country');
    // eslint-disable-next-line no-process-exit
    process.exit(1);
}
const spaceId = process.argv[2];
const environment = process.argv[3];
const accessToken = process.argv[4];
const longLocaleName = process.argv[5];
const localeCode = process.argv[6];
const manager = new SpaceManager(spaceId, environment, accessToken);
void manager.createLocale(longLocaleName, localeCode, undefined);
//# sourceMappingURL=create-locale.js.map