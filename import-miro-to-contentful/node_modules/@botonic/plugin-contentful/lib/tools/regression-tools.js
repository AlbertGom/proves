"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchRegression = exports.GroundTruth = void 0;
class GroundTruth {
    constructor(utterance, contentId) {
        this.utterance = utterance;
        this.contentId = contentId;
    }
}
exports.GroundTruth = GroundTruth;
class SearchRegression {
    constructor(plugin, evaluator) {
        this.plugin = plugin;
        this.evaluator = evaluator;
    }
    run(matchType, groundTruths, locale) {
        return __awaiter(this, void 0, void 0, function* () {
            let sumEvals = 0;
            let count = 0;
            for (const gt of groundTruths) {
                count++;
                const res = yield this.plugin.search.searchByKeywords(gt.utterance, matchType, { locale });
                const pos = res.findIndex(res => res.contentId.id == gt.contentId);
                sumEvals += this.evaluator(pos >= 0 ? pos : undefined, res.length);
            }
            return sumEvals / count;
        });
    }
}
exports.SearchRegression = SearchRegression;
//# sourceMappingURL=regression-tools.js.map