"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeywordsTool = exports.StemmedKeyword = void 0;
const nlp_1 = require("../nlp");
class StemmedKeyword {
    constructor(rawKeyword, stemmedKeyword) {
        this.rawKeyword = rawKeyword;
        this.stemmedKeyword = stemmedKeyword;
    }
    toString() {
        return `${this.rawKeyword}: ${this.stemmedKeyword.toString()}`;
    }
}
exports.StemmedKeyword = StemmedKeyword;
/**
 * Reports all the contents's stemmed keywords.
 * Useful to check if they're too short.
 */
class KeywordsTool {
    constructor(cms, locale, normalizer) {
        this.cms = cms;
        this.locale = locale;
        this.normalizer = normalizer;
    }
    dumpKeywords() {
        return __awaiter(this, void 0, void 0, function* () {
            const keywords = new Map();
            const context = { locale: this.locale };
            const results = yield this.cms.contentsWithKeywords(context);
            for (const res of results) {
                const stemmed = res.common.keywords.map(kw => nlp_1.Keyword.fromUtterance(kw, context.locale, this.normalizer));
                keywords.set(res.common.name, stemmed);
            }
            return keywords;
        });
    }
}
exports.KeywordsTool = KeywordsTool;
//# sourceMappingURL=keyword-tools.js.map