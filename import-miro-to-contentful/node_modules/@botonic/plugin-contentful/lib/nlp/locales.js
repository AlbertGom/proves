"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.preprocess = exports.buildLocale = exports.fixLocale = exports.countryFromLocale = exports.languageFromLocale = exports.checkLocale = exports.SUPPORTED_LOCALES = exports.BULGARIAN = exports.DUTCH = exports.HUNGARIAN = exports.SLOVENIAN = exports.SLOVAK = exports.CROATIAN = exports.UKRAINIAN = exports.CZECH = exports.GREEK = exports.ROMANIAN = exports.GERMAN = exports.FRENCH = exports.ITALIAN = exports.TURKISH = exports.RUSSIAN = exports.POLISH = exports.PORTUGUESE = exports.ENGLISH = exports.CATALAN = exports.SPANISH = void 0;
const stemmer_1 = require("./stemmer");
exports.SPANISH = 'es';
exports.CATALAN = 'ca';
exports.ENGLISH = 'en';
exports.PORTUGUESE = 'pt';
exports.POLISH = 'pl';
exports.RUSSIAN = 'ru';
exports.TURKISH = 'tr';
exports.ITALIAN = 'it';
exports.FRENCH = 'fr';
exports.GERMAN = 'de';
exports.ROMANIAN = 'ro';
exports.GREEK = 'el';
exports.CZECH = 'cs';
exports.UKRAINIAN = 'uk';
exports.CROATIAN = 'hr';
exports.SLOVAK = 'sk';
exports.SLOVENIAN = 'sl';
exports.HUNGARIAN = 'hu';
exports.DUTCH = 'nl';
exports.BULGARIAN = 'bg';
exports.SUPPORTED_LOCALES = [
    exports.SPANISH,
    exports.CATALAN,
    exports.ENGLISH,
    exports.PORTUGUESE,
    exports.POLISH,
    exports.RUSSIAN,
    exports.TURKISH,
    exports.ITALIAN,
    exports.FRENCH,
    exports.GERMAN,
    exports.ROMANIAN,
    exports.GREEK,
    exports.CZECH,
    exports.UKRAINIAN,
    exports.CROATIAN,
    exports.SLOVAK,
    exports.SLOVENIAN,
    exports.HUNGARIAN,
    exports.DUTCH,
    exports.BULGARIAN,
];
function checkLocale(locale) {
    // will throw exception if not supported
    stemmer_1.stemmerFor(locale);
    return locale;
}
exports.checkLocale = checkLocale;
function languageFromLocale(locale) {
    return locale.substr(0, 2).toLowerCase();
}
exports.languageFromLocale = languageFromLocale;
/**
 * @return "" when no country available
 */
function countryFromLocale(locale) {
    return locale.substr(3).toUpperCase();
}
exports.countryFromLocale = countryFromLocale;
function fixLocale(locale) {
    return buildLocale(languageFromLocale(locale), countryFromLocale(locale));
}
exports.fixLocale = fixLocale;
function buildLocale(lang, country) {
    if (!country) {
        return lang.toLowerCase();
    }
    return lang.toLowerCase() + '-' + country.toUpperCase();
}
exports.buildLocale = buildLocale;
/**
 * Converts to lowercase, trims and removes accents
 */
function preprocess(locale, text) {
    text = text.trim().toLowerCase();
    return text.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
}
exports.preprocess = preprocess;
//# sourceMappingURL=locales.js.map